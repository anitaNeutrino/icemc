#ifndef icemc_random_h
#define icemc_random_h

#include "TRandom.h" 



/** Seeds all RNG's */ 
void setSeed(ULong_t seed); 

/* Convenience helper to get an RNG by name
 *
 * Right now there are far too many! 
 *
 * */ 
enum WhichIceMcRNG
{
  RNG_BALLOON_POSITION,
  RNG_DIRECTION,
  RNG_THETA_RF_RESOLUTION, 
  RNG_POSNU,
  RNG_INTERACTION, 
  RNG_INTERACTION_LOCATION, 
  RNG_ABSORB,
  RNG_RANDOMISE_POL, 
  RNG_XRNDM, 
  RNG_SIGNAL_FLUCT, 
  RNG_PHASES, 
  RNG_NOISE, //might be merged with above? 
  RNG_SOURCE, 
  RNG_SLOPEY, 
  RNG_SECONDARIES,
  RNG_SUMMED_TRIGGER,
  RNG_SECOND_BANG, 
  RNG_SPECTRA, 
  RNG_DEADTIME, 
  RNG_RICIAN, 
  RNG_INJECT, 
  RNG_SMEARED_INCIDENT_ANGLE, 
  HOW_MANY_RNGS_DO_WE_HAVE
};  

TRandom * getRNG(WhichIceMcRNG which);

enum WhichIceMcRNGType
{
  
  RNG_TYPE_TRANDOM3, 
#if ROOT_VERSION_CODE >= ROOT_VERSION(6,8,0)
  RNG_TYPE_MT64, 
  RNG_TYPE_MIXMAX256, 
#endif
  RNG_TYPE_XOSHIRO256PLUS 
};  


WhichIceMcRNGType getRNGType(); 
void setRNGType(WhichIceMcRNGType type); 


// Another RNG implemetatntion that supports 64-bit seeds

class TRandomXoshiro256Plus  : public TRandom 
{

  private: 
    ULong_t fState[4]; 


  public:
    /* Initialize with seed */ 
    TRandomXoshiro256Plus(ULong_t seed = 12345) 
    { SetSeed(seed) ; }
     

    /*Initialize with state 
     **/ 
    TRandomXoshiro256Plus(ULong_t state0, ULong_t state1, ULong_t state2, ULong_t state3) 
    {
      fState[0] = state0; 
      fState[1] = state1; 
      fState[2] = state2; 
      fState[3] = state3; 
    }

    TRandomXoshiro256Plus(ULong_t * state) 
    {
      fState[0] = state[0];
      fState[1] = state[1];
      fState[2] = state[2];
      fState[3] = state[3];
    }

    // this is obviously truncated
    virtual UInt_t GetSeed() const { return fState[0]; }

    /** Get the full state */ 
    void getState(ULong_t * state) const { state[0] = fState[0]; state[1] = fState[1]; state[2] = fState[2]; state[3] = fState[3]; }
    void getState(ULong_t & st0, ULong_t & st1, ULong_t & st2, ULong_t & st3) const { st0 = fState[0]; st1 = fState[1]; st2=fState[2]; st3=fState[3]; }

    virtual void SetSeed(ULong_t seed = 0); 

    // This is the actual 64-bit value generated by the generator 
    virtual ULong_t RawRndm(); 
    virtual Double_t Rndm(); 
    virtual Double_t Rndm(Int_t unused) { (void) unused; return Rndm(); }
    virtual void RndmArray(Int_t n, Float_t * array); 
    virtual void RndmArray(Int_t n, Double_t * array); 

    ClassDef(TRandomXoshiro256Plus,1); 
};




#endif
